⦁ 2025년 04월 16일(수)
⦁ 단원명 : JavaScript(core)
⦁ 학습 주제 : 
  variable (변수), operator(연산자), object literal(리터럴 객체)
⦁ 학습 내용 : 
- variable (변수) 
  1. dynamically typed language (동적 타입 언어)
/* 01_동적 타입 언어 */

var test;
console.log(typeof test);

test = 1;
console.log(typeof test);

test = "Javascript";
console.log(typeof test);

test = true;
console.log(typeof test);

test = null;
console.log(typeof test);

test = Symbol();

test = {}; // 객체리터럴

test = []; // 배열

test = function () {}; // 함수
console.log(typeof test);
    
  2. implicit-coercion(암묵적 타입 환)
    - convert to string (문자열 타입으로 변환)
/* 03_암묵적 타입 변환 
개발자가 의도적으로 값의 타입을 변환하는 것을 명시적 타입 변환이라고 하며
자바스크립트 엔진에 의해 암묵적으로 타입이 자동 변환되는 것을 암묵적 타입 변환이라고 한다.
*/

/* 01_문자열 타입으로 변환 */
console.log(10 + '20');

// 표현식의 결과를 문자열 타입으로 암묵적으로 변환
console.log(`10 + 20 : ${10 + 20}`);

console.log(1 + "");        // "1"
console.log(NaN + "");   // "NaN"
console.log(Infinity + "");
console.log(true + "");
console.log(null + "");
console.log(undefined + "");
// console.log(Symbol() + "");
console.log({} + "");
console.log([] + "");
console.log(function(){} + "");

    - convert to number (숫자 타입으로 변환)
/* 02_숫자타입으로 변환 */
console.log(10 - '5');  //5
console.log(10 * '5');  //50
console.log(10 % 'javascript'); //NaN

// 비교 연산자로 크기를 비교하기 위해 모두 숫자타입이여야 하므로
// 숫자가 아닌 피연산자를 숫자 타입으로 암묵적 타입 변환한다.
console.log(10 > '5');

console.log(+'');   // 0
console.log(+'1');  // 1
console.log(+'javascript'); //NaN
console.log(+true); // 1
console.log(+false);    // 0
console.log(+null); // 0
console.log(+undefined);    //NaN
// console.log(+Symbol());
console.log(+{});   //NaN
console.log(+[]);   // 0 -> 빈 배열만 숫자로 바꿀 수 있음
console.log(+[1, 2, 3]);   // NaN
console.log(+function(){}); //NaN    

    - convert to boolean (논리 타입으로 변환)
/* 03_불리언 타입으로 변환 */

// 자바스크립트 엔진은 불리언 타입이 아닌 값을 Truthy 값(참으로 평가되는 값) 
// 또는 Falsy값(거짓으로 평가되는 값)으로 구분한다.
if(true) console.log("if(true)");       
if(false) console.log("if(false)");    
if(undefined) console.log("if(undefined)");
if(null) console.log("if(null)");
if(0) console.log("if(0)");
if(NaN) console.log("if(NaN)");
if('') console.log("if('')");          
if('JavaScript') console.log("if('JavaScript')");  

// false, undefined, null, 0, NaN ''(빈문자열)은 Falsy 값이며 그 외는 Truthy 값이다.

  3. explicit coercion(명시적 타입 변환)
    - convert to string (문자열 타입으로 변환)
/* 04_명시적 타입 변환 */
/* 01_문자열 타입으로 변환 */

// 1. String 생성자 함수를 new 연산자 없이 호출
console.log(String(10));    // "10"
console.log(String(NaN));   // "NaN"
console.log(String(Infinity));  // "Infinity"
console.log(String(true));  // "true"
console.log(String(false)); // "false"

// 2. Object.prototype.toString 메소드 사용
console.log((10).toString);  // "10"
console.log((NaN).toString); // "NaN"
console.log((Infinity).toString); // "Infinity"
console.log((true).toString);
console.log((false).toString);

// 3. 문자열 연결 연산자 이용

    - convert to number (숫자 타입으로 변환)
/* 02_숫자 타입으로 변환 */

// 1. Number 생성자 함수를 new 연산자 없이 호출
console.log(Number('10'));  // 10
console.log(Number('10.01'));  // 10.01
console.log(Number(true));  // 1
console.log(Number(false));  // 0

// 2. parseInt, parseFloat 함수 이용
console.log(parseInt('10'));    // 10
console.log(parseFloat('10'));    // 10
console.log(parseInt('10.01')); // 10
console.log(parseFloat('10.01'))    // 10.01
console.log(parseFloat('10.01.01')) // 10.01

// 3. '+' 단항 산술 연산자 이용

// 4. '*' 산술 연산자 이용
console.log(typeof('10' * 1));
console.log('10.01' * 1);
console.log(true * 1);
console.log(false * 1);

    - convert to boolean (논리 타입으로 변환)
/* 03_불리언 타입으로 변환 */

// 1. Boolean 생성자 함수를 new 연산자 없이 호출하는 방법
console.log(Boolean('JavaScript'));         // true 
console.log(Boolean(''));                   // false 
console.log(Boolean(1));                    // true 
console.log(Boolean(0));                    // false 
console.log(Boolean(NaN));                  // false 
console.log(Boolean(Infinity));             // true 
console.log(Boolean(null));                 // false 
console.log(Boolean(undefined));            // false 
console.log(Boolean({}));                   // true 
console.log(Boolean([]));                   // true 

// 2. ! 부정 논리 연산자를 두 번 사용하는 방법
console.log(!!'JavaScript');                   // true
console.log(!!'');                          // false
console.log(!!1);                              // true
console.log(!!0);                           // false
console.log(!!NaN);                         // false
console.log(!!Infinity);                    // true
console.log(!!null);                        // false
console.log(!!undefined);                   // false
console.log(!!{});                          // true
console.log(!![]);                          // true

- operator(연산자)
  1. comparison operator(비교 연산자)
/* 01_비교 연산자 */

/* 동등/일치 비교 연산자 */

// 숫자 1, 문자 '1', true 비교
console.log(`1 == '1' : ${1 == '1'}`);
console.log(`1 == true : ${1 == true}`);

console.log(`1 === '1' : ${1 === '1'}`);
console.log(`1 === true : ${1 === true}`);

// 숫자 0, 문자 '0', 빈 문자열 '', false 비교
console.log(`0 == '0' : ${0 == '0'}`);
console.log(`0 == '' : ${0 == ''}`);
console.log(`0 == false : ${0 == false}`);

console.log(`0 === '0' : ${0 === '0'}`);
console.log(`0 === '' : ${0 === ''}`);
console.log(`0 === false : ${0 === false}`);

// null, undefined 비교
console.log(`null == undefined : ${null == undefined}`);
console.log(`null === undefined : ${null === undefined}`);

// NaN은 자신과 일치하지 않은 유일한 값이다.
console.log(`NaN == NaN : ${NaN == NaN}`);
console.log(`NaN === NaN : ${NaN === NaN}`);

// 일치 비교 연산자
console.log(`'hello' === 'hello' : ${'hello' === 'hello'}`);
console.log(`'hello' !== 'hello' : ${'hello' !== 'hello'}`);

// 대소 비교 연산자
console.log(`'apple' < 'banana' : ${'apple' < 'banana'}`);
console.log(`'cat' >= 'Zoo' : ${'cat' >= 'Zoo'}`);  // 대문자가 소문자보다 작다

  2. logical operator(논리 연산자)
/* 01_논리연산자 - 단축 평가 */

console.log('apple' || 'banana');
console.log(false || 'banana');

console.log('apple' && 'banana');
console.log(false && 'banana');
console.log('apple' && false);

var num = 1;
if(num % 2 == 0)
    console.log('짝수입니다');
else 
    console.log('홀수입니다');

// 위를 단축평가를 활용하여 바꿔본다.
num % 2 == 0 && console.log('짝수입니다.');
num % 2 == 0 || console.log('홀수입니다.');
  
  3. ES11 operator
    - optional chaining operator(옵셔널 체이닝 연산자)
/* 01_옵셔널 체이닝 연산자 */
var obj = null;
// var val = obj.value;
var val = obj?.value;
console.log(val);

var str = '';
var len = str && str.length;
console.log(len);

var len = str?.length;
console.log(len);

    - nullish coalescing operator(null 병합 연산자)
/* 02_null 병합 연산자 */
var test = null ?? '기본 값';
console.log(test);

// null 병합 연산자는 null, undefined가 아닐 경우 그대로 반환한다.
var value = '' ?? '기본 값';
console.log(value);    
    
  - object literal(리터럴 객체)
    1. object(객체)
/* 01_객체 */

var student = {

    // 키-값 쌍으로 구성 된 프로퍼티
    // 프로퍼티 : 객체의 상태를 나타내는 값(data)
    name : '유관순',
    age : 16,
    // 메소드 : 프로퍼티(상태 데이터)를 참조하고 조작할 수 있는 동작
    getInfo : function() {
        return `${this.name}(은)는 ${this.age}세입니다.`;
    }
};

console.log(typeof student);
console.log(student);
console.log(student.getInfo());

// 프로퍼티를 정의하지 않을 시 빈 객체가 생성된다.
var student2 = {};
console.log(typeof student2);
console.log(student2);

    2. property (속성)
      - property
/* 01_프로퍼티 : 객체는 프로퍼티의 집합이며, 프로퍼티는 키와 값으로 구성 된다. */

var student = {
    name : '유관순',
    age : 16
};

/*
    프로퍼티 키 : 빈 문자열을 포함하는 모든 문자열이므로 따옴표를 사용하지만 
                     식별자 네이밍 규칙을 따르는 경우 사용하지 않아도 된다.
    프로퍼티 값 : 자바스크립트에서 사용할 수 있는 모든 값                 
*/
var obj = {
    normal : 'normal value',
    '@ s p a c e @' : 'space value',
    '' : '',                        // 오류 발생하지는 않지만 논리적으로 문제가 생길 수 있어서 권장하지 않는다.
    0 : 1,                      // 숫자 키는 내부적으로 문자열로 변환된다.
    var : 'var',                 // 예약어 키는 오류 발생하지는 않지만 권장하지 않는다.
    normal : 'new value'    // 이미 존재하는 키를 중복 선언하면 나중에 선언한 프로퍼티로 덮어쓴다.
};

console.log(obj['normal']);

var key = 'test';
obj[key] = 'test value';

console.log(obj);

      - method
/* 02_메소드 : 자바스크립트의 함수는 객체이다. 함수는 값으로 취급할 수 있고 프로퍼티 값으로 사용할 수 있다. */

var dog = {
    name : '뽀삐',
    eat : function(food) {
        console.log(`${this.name}(은)는 ${food}를 맛있게 먹어요`);
    }
};

dog.eat('고구마');

      - property accessor(프로퍼티 접근)
/* 03_프로퍼티 접근 */

var dog = {
    name : '뽀삐',
    eat : function(food) {
        console.log(`${this.name}(은)는 ${food}를 맛있게 먹어요`);
    }
};

// 마침표 표기법
dog.eat('고구마');
console.log(dog.name);

// 대괄호 표기법
console.log(dog['name']);
dog['eat']('고구마');

var obj = {
    'dash-key' : 'dash-value',
    0 : 1
};

// 키 값에 특수문자가 들어있으면 대괄호 표기법으로만 접근이 가능하다.
// console.log(obj.dash-key);
// console.log(obj.'dash-key');
// console.log(obj[dash-key]);
console.log(obj['dash-key']);

      - property-change-add-remove
/* 04_프로퍼티 값 변경, 추가, 삭제 */
var dog = {
    name : '뽀삐'
};

// 이미 존재하는 프로퍼티에 값을 할당하면 프로퍼티 값이 갱신된다.
dog.name = '두부';
// dog['name'] = '두부';
console.log(dog);

// 프로퍼티 동적 추가
dog.age = 3;
// dog['age'] = 3;
console.log(dog);

// 프로퍼티 삭제
delete dog.age;
// delete dog.run;  // 존재하지 않는 프로퍼티를 삭제하면 아무런 에러 없이 무시된다.
console.log(dog);
      
    3. ES6
      - property value shorthand(프로퍼티 값 단축 구문)
/* 01_프로퍼티 값 단축 구문 */
var id = 'p-0001';
var price = 30000;

var product = {
    id : id,
    price : price
};

console.log(product);

// 변수 이름과 프로퍼티 키가 동일한 이름일 때 프로퍼티 키를 생략할 수 있다.
// 프로퍼티 키는 변수 이름으로 자동 생성 된다.
var product2 = { id, price };

console.log(product2);

      - method shorthand(메서드 단축)
/* 02_메소드 단축 */
var dog = {
    name : '뽀삐',
    eat : function(food) {
        console.log(`${this.name}(은)는 ${food}를 맛있게 먹어요`);
    }
};

dog.eat('고구마');

// ES6에서는 메소드를 정의할 대 function 키워드를 생략한 축약 표현을 사용할 수 있다.
var dog2 = {
    name : '두부',
    eat(food) {
        console.log(`${this.name}(은)는 ${food}를 맛있게 먹어요`);
    }
};

dog2.eat('고구마');

    4. additional-operator-and-traversal (추가 연산자와 순회)
      - in operator (in 연산자)
/* in 연산자 : 프로퍼티 존재 여부 확인하기 */
var student = {
    name : '유관순',
    age : 16,
    test : undefined
};

console.log(student.name === undefined);
console.log(student.height === undefined);
console.log(student.test === undefined);    // 프로퍼티 값이 undefined라 프로퍼티는 존재하지만 true - 존재하지 않음으로 판별되는 문제

console.log("name" in student);
console.log("height" in student);
console.log("test" in student);/* for-in 반복문 : 객체의 모든 키 순회 */
var student = {
    name : '유관순',
    age : 16,
    getInfo : function() {
        return `${this.name}(은)는 ${this.age}세입니다.`;
    }
};

for(var key in student) {
    console.log(`key : ${key}`);        // 키
    console.log(`student[key] : ${student[key]}`);  // 키에 해당하는 값
}

      - for in
```jsx
**```jsx
/* in 연산자 : 프로퍼티 존재 여부 확인하기 */
var student = {
    name : '유관순',
    age : 16,
    test : undefined
};

console.log(student.name === undefined);
console.log(student.height === undefined);
console.log(student.test === undefined);    // 프로퍼티 값이 undefined라 프로퍼티는 존재하지만 true - 존재하지 않음으로 판별되는 문제

console.log("name" in student);
console.log("height" in student);
console.log("test" in student);/* for-in 반복문 : 객체의 모든 키 순회 */
var student = {
    name : '유관순',
    age : 16,
    getInfo : function() {
        return `${this.name}(은)는 ${this.age}세입니다.`;
    }
};

for(var key in student) {
    console.log(`key : ${key}`);        // 키
    console.log(`student[key] : ${student[key]}`);  // 키에 해당하는 값
}
```**
```      
      
